import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class ElectricityConsumption {

    // Mapper class
    public static class ConsumptionMapper extends Mapper<LongWritable, Text, Text, DoubleWritable> {
        private Text year = new Text();
        private DoubleWritable avgConsumption = new DoubleWritable();

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String[] fields = value.toString().split(",");
            if (fields.length >= 2) {  // Kiểm tra để đảm bảo đủ các trường dữ liệu
                year.set(fields[0].trim());  // Lấy năm
                avgConsumption.set(Double.parseDouble(fields[1].trim()));  // Lấy mức tiêu thụ trung bình
                context.write(year, avgConsumption);
            }
        }
    }

    // Reducer class
    public static class ConsumptionReducer extends Reducer<Text, DoubleWritable, Text, DoubleWritable> {
        public void reduce(Text key, Iterable<DoubleWritable> values, Context context) throws IOException, InterruptedException {
            for (DoubleWritable val : values) {
                if (val.get() > 30) {
                    context.write(key, val);  // Xuất cặp key-value nếu tiêu thụ trung bình > 30
                }
            }
        }
    }

    // Main method
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: ElectricityConsumption <input path> <output path>");
            System.exit(-1);
        }

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Electricity Consumption Filter");
        job.setJarByClass(ElectricityConsumption.class);
        job.setMapperClass(ConsumptionMapper.class);
        job.setReducerClass(ConsumptionReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(DoubleWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
