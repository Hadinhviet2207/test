import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class Map1 {

  // Mapper class to extract year and monthly electricity consumption
  public static class ConsumptionMapper
       extends Mapper<Object, Text, IntWritable, DoubleWritable>{

    private IntWritable year = new IntWritable();
    private DoubleWritable consumption = new DoubleWritable();

    @Override
    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      String line = value.toString();
      StringTokenizer tokenizer = new StringTokenizer(line, ",");

      // Assume that first token is the year, and second token is the consumption value
      if (tokenizer.hasMoreTokens()) {
        String yearStr = tokenizer.nextToken();
        String consumptionStr = tokenizer.nextToken();
        try {
          int yearInt = Integer.parseInt(yearStr);
          double consumptionDouble = Double.parseDouble(consumptionStr);

          year.set(yearInt);
          consumption.set(consumptionDouble);

          context.write(year, consumption); // Output (year, consumption)
        } catch (NumberFormatException e) {
          // Handle any formatting issues
          System.err.println("Invalid record: " + line);
        }
      }
    }
  }

  // Reducer class to calculate yearly average and filter those > 30
  public static class AvgConsumptionReducer
       extends Reducer<IntWritable, DoubleWritable, IntWritable, DoubleWritable> {
    private DoubleWritable result = new DoubleWritable();

    @Override
    public void reduce(IntWritable key, Iterable<DoubleWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
      int count = 0;
      double sum = 0;

      // Sum up all monthly consumption for the year and count the months
      for (DoubleWritable val : values) {
        sum += val.get();
        count++;
      }

      // Calculate the average consumption for the year
      double average = sum / count;

      // Filter years with average consumption > 30
      if (average > 30) {
        result.set(average);
        context.write(key, result); // Output (year, average consumption)
      }
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    GenericOptionsParser optionParser = new GenericOptionsParser(conf, args);
    String[] remainingArgs = optionParser.getRemainingArgs();
    if (remainingArgs.length != 2) {
      System.err.println("Usage: Map1 <in> <out>");
      System.exit(2);
    }
    Job job = Job.getInstance(conf, "electricity consumption");
    job.setJarByClass(Map1.class);
    job.setMapperClass(ConsumptionMapper.class);
    job.setReducerClass(AvgConsumptionReducer.class);
    job.setOutputKeyClass(IntWritable.class);
    job.setOutputValueClass(DoubleWritable.class);

    FileInputFormat.addInputPath(job, new Path(remainingArgs[0]));
    FileOutputFormat.setOutputPath(job, new Path(remainingArgs[1]));

    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
